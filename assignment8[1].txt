1)

public class FindMissingAndDuplicate {
    public static void main(String[] args) {
        int[] arr1 = {4, 3, 2, 7, 8, 2, 1, 5};
        int[] arr2 = {3, 1, 3};

        int[] result1 = findMissingAndDuplicate(arr1);
        System.out.println("Missing number: " + result1[0] + ", Duplicate number: " + result1[1]);

        int[] result2 = findMissingAndDuplicate(arr2);
        System.out.println("Missing number: " + result2[0] + ", Duplicate number: " + result2[1]);
    }

    public static int[] findMissingAndDuplicate(int[] arr) {
        int[] result = new int[2];
        int n = arr.length;

        // Calculate sum of elements and sum of squares
        long sum = (n * (n + 1)) / 2;
        long sumOfSquares = (n * (n + 1) * (2 * n + 1)) / 6;
        
        for (int num : arr) {
            sum -= num;
            sumOfSquares -= (long)num * num;
        }

        // Now, sum = A - B, and sumOfSquares = A^2 - B^2 = (A + B)(A - B)
        // We can use these equations to find A and B
        long sumDiff = sum;
        long sumSquaresDiff = sumOfSquares;
        
        // Calculate A + B
        long sumAB = sumSquaresDiff / sumDiff;

        // Now, we have A + B and A - B, we can find A and B
        int missingNumber = (int) ((sumAB + sumDiff) / 2);
        int duplicateNumber = (int) (sumAB - missingNumber);

        result[0] = missingNumber;
        result[1] = duplicateNumber;

        return result;
    }
}


2)

public class FirstLastOccurrences {
    public static void main(String[] args) {
        int[] arr = {1, 2, 2, 2, 3, 4, 4, 5, 6};
        int x = 2;

        int[] occurrences = findFirstAndLastOccurrences(arr, x);
        System.out.println("First occurrence of " + x + ": " + occurrences[0]);
        System.out.println("Last occurrence of " + x + ": " + occurrences[1]);
    }

    public static int[] findFirstAndLastOccurrences(int[] arr, int x) {
        int[] result = {-1, -1};

        // Find the first occurrence of x
        int low = 0, high = arr.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == x) {
                result[0] = mid;
                high = mid - 1; // Continue searching on the left side
            } else if (arr[mid] < x) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        // Find the last occurrence of x
        low = 0;
        high = arr.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == x) {
                result[1] = mid;
                low = mid + 1; // Continue searching on the right side
            } else if (arr[mid] < x) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return result;
    }
}


3)

public class RearrangeArray {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6};
        rearrangeArray(arr);
        printArray(arr);
    }

    public static void rearrangeArray(int[] arr) {
        int n = arr.length;
        int maxIdx = n - 1;
        int minIdx = 0;
        int maxElement = arr[maxIdx] + 1;

        for (int i = 0; i < n; i++) {
            // If even index, pick maximum element
            if (i % 2 == 0) {
                arr[i] += (arr[maxIdx] % maxElement) * maxElement;
                maxIdx--;
            } else { // If odd index, pick minimum element
                arr[i] += (arr[minIdx] % maxElement) * maxElement;
                minIdx++;
            }
        }

        // Divide all elements by maxElement to get the modified elements
        for (int i = 0; i < n; i++) {
            arr[i] /= maxElement;
        }
    }

    public static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}


4)

public class KthElementOfSortedArrays {
    public static void main(String[] args) {
        int[] arr1 = {2, 3, 6, 7, 9};
        int[] arr2 = {1, 4, 8, 10};
        int k = 5;

        int kthElement = findKthElement(arr1, arr2, k);
        System.out.println("The " + k + "th element of the final sorted array is: " + kthElement);
    }

    public static int findKthElement(int[] arr1, int[] arr2, int k) {
        int n = arr1.length;
        int m = arr2.length;

        int i = 0, j = 0;
        int count = 0;
        int kthElement = 0;

        while (i < n && j < m) {
            if (arr1[i] < arr2[j]) {
                kthElement = arr1[i];
                i++;
            } else {
                kthElement = arr2[j];
                j++;
            }
            count++;
            if (count == k) {
                break;
            }
        }

        while (i < n && count < k) {
            kthElement = arr1[i];
            i++;
            count++;
        }

        while (j < m && count < k) {
            kthElement = arr2[j];
            j++;
            count++;
        }

        return kthElement;
    }
}

